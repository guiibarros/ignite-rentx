version: "3.8" # Versão de suporte do docker. 3.8 suporta o docker 19 ou superior


services: # Cada serviço é um container
  database: # Container do postgres
    image: postgres # Usamos uma imagem já feita do postgres
    container_name: database_rentx # Nome do container
    restart: always # Sempre reiniciar

    # Dados básicos do postgres, assim como qualquer outro sgdb.
    ports:
      - 5432:5432 # Tunnel de referência entre a porta do docker e da maquina fisica
    environment:
      - POSTGRES_USER=docker
      - POSTGRES_PASSWORD=ignite
      - POSTGRES_DB=rentx
    volumes:
      - pgdata:/data/postgres # Cria um diretório do postgres referenciando os dados do driver

  redis:
    image: redis:alpine
    ports:
      - 6379:6379

  # app: # Rentx container
  #   build: . # Quando executar o comando build, então utiliza as configurações do Dockerfile
  #   container_name: rentx # Nome do container
  #   ports:
  #     - 3333:3333 # Tunnel de referência entre a porta do docker e da maquina fisica

  #   # Cria um volume com o diretório do container linkado no projeto atual. Responsável por refletir alterações
  #   volumes:
  #     - .:/usr/app
    
  #   # Os dois containers estão com IP diferentes, estes comandos fazem uma ligação entre eles
  #   links:
  #     - database
  #   depends_on:
  #     - database


volumes: # Criação de volumes
  pgdata:
    driver: local # Referência aos dados do driver do postgres, que está instalado localmente no projeto (node_modules)

# docker-compose up - criar e subir containers
# docker-compose up -d - criar e subir em background
# docker-compose start - inicia todos os containers do diretório atual
# docker-compose stop - parar todos os containers do diretório atual
# docker-compose down - remover todos os containers do diretório atual
# docker-compose up --force-recreate - força a recriação dos containers